service: ${self:custom.global.product}-${self:custom.component}

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-domain-manager

package:
  exclude:
    - '**/*.ts'

custom:
  component: api
  global: ${file(../serverless-global.yml)}

  specifiedStage: ${env:AWS_STAGE, opt:stage}
  stage: ${self:custom.specifiedStage, 'test'}

  subdomains:
    prod: '${self:custom.component}.'
    test: ${self:custom.component}-${self:custom.global.environments.test}.
    ian: ${self:custom.component}-${self:custom.global.environments.ian}.
    andrew: ${self:custom.component}-${self:custom.global.environments.andrew}.

  subdomain: ${self:custom.subdomains.${self:custom.stage}}

  hostname: ${self:custom.subdomain}${self:custom.global.domain}

  customDomain:
    domainName: ${self:custom.hostname}
    certificateName: '*.${self:custom.global.domain}'
    basePath: ''
    stage: ${self:custom.stage}
    createRoute53Record: true

  dynamodb:
    podcasts: ${self:custom.global.product}-${self:custom.stage}-${self:custom.global.dynamodb.podcasts.suffix}
    episodes: ${self:custom.global.product}-${self:custom.stage}-${self:custom.global.dynamodb.episodes.suffix}
    statements: ${self:custom.global.product}-${self:custom.stage}-${self:custom.global.dynamodb.statements.suffix}
    speakers: ${self:custom.global.product}-${self:custom.stage}-${self:custom.global.dynamodb.speakers.suffix}

provider:
  name: aws
  runtime: nodejs8.10
  region: ${self:custom.global.region}
  stage: ${self:custom.stage}
  environment:
    PODCASTS_TABLE: ${self:custom.dynamodb.podcasts}
    EPISODES_TABLE: ${self:custom.dynamodb.episodes}
    STATEMENTS_TABLE: ${self:custom.dynamodb.statements}
    SPEAKERS_TABLE: ${self:custom.dynamodb.speakers}
    DOMAIN_NAME: ${self:custom.global.domain}
  iamRoleStatements:
    #
    # DynamoDB Table Permissions
    #
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:DescribeTable
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamodb.podcasts}
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamodb.episodes}
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamodb.speakers}
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamodb.statements}

functions:
  http:
    handler: src/lambda.http
    events:
      - http: ANY /
      - http: ANY /{proxy+}

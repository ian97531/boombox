service: ${self:custom.global.product}-${self:custom.component}

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-domain-manager

package:
  exclude:
    - '**/*.ts'

custom:
  component: api
  global: ${file(../serverless-global.yml)}

  specifiedStage: ${env:AWS_STAGE, opt:stage}
  stage: ${self:custom.specifiedStage, 'test'}

  subdomains:
    prod: '${self:custom.component}.'
    test: ${self:custom.component}-${self:custom.global.environments.test}.
    ian: ${self:custom.component}-${self:custom.global.environments.ian}.
    andrew: ${self:custom.component}-${self:custom.global.environments.andrew}.

  subdomain: ${self:custom.subdomains.${self:custom.stage}}

  hostname: ${self:custom.subdomain}${self:custom.global.domain}

  customDomain:
    domainName: ${self:custom.hostname}
    certificateName: '*.${self:custom.global.domain}'
    basePath: ''
    stage: ${self:custom.stage}
    createRoute53Record: true

  # TODO(ian): These should reference ${self:custom.global.product}-${self:custom.stage}-[table]
  dynamodb:
    podcasts: boombox-pipeline-${self:custom.stage}-podcasts
    episodes: boombox-pipeline-${self:custom.stage}-episodes
    statements: boombox-pipeline-${self:custom.stage}-statements
    speakers: boombox-pipeline-${self:custom.stage}-speakers

  sns:
    topics:
      errors:
        name: ${self:service}-${self:custom.stage}-errors
        arn: arn:aws:sns:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.sns.topics.errors.name}

provider:
  name: aws
  runtime: nodejs8.10
  region: us-east-1
  stage: ${self:custom.stage}
  environment:
    PODCASTS_TABLE: ${self:custom.dynamodb.podcasts}
    EPISODES_TABLE: ${self:custom.dynamodb.episodes}
    STATEMENTS_TABLE: ${self:custom.dynamodb.statements}
    SPEAKERS_TABLE: ${self:custom.dynamodb.speakers}
    ERROR_TOPIC: ${self:custom.sns.topics.errors.arn}
  iamRoleStatements:
    #
    # DynamoDB Table Permissions
    #
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:DescribeTable
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamodb.podcasts}
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamodb.episodes}
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamodb.speakers}
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamodb.statements}

    #
    # SNS Topic Publish Permissions
    #
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource:
        - ${self:custom.sns.topics.errors.arn}

functions:
  http:
    handler: src/lambda.http
    events:
      - http: ANY /
      - http: ANY /{proxy+}

resources:
  Resources:
    #
    # SNS for Errors
    #
    errorSNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Boombox API Errors (${self:custom.stage})
        TopicName: ${self:custom.sns.topics.errors.name}

    errorSNSSubscription:
      Type: AWS::SNS::Subscription
      DependsOn:
        - errorSNSTopic
      Properties:
        Endpoint: boombox-api-errors@googlegroups.com
        Protocol: 'email'
        TopicArn: ${self:custom.sns.topics.errors.arn}

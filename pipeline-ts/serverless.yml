service: ${self:custom.global.product}-${self:custom.component}

plugins:
  - serverless-plugin-typescript

package:
  exclude:
    - '**/*.ts'

custom:
  component: pipelinets
  global: ${file(../serverless-global.yml)}

  specifiedStage: ${env:AWS_STAGE, opt:stage}
  stage: ${self:custom.specifiedStage, 'test'}

  timeout: 300

  bucket: ${self:service}-${self:custom.stage}

  steps:
    podcastCheckFeed:
      name: a-podcast-check-feed
      stageName: ${self:service}-${self:custom.stage}-${self:custom.steps.podcastCheckFeed.name}
      sqs:
        arn: arn:aws:sqs:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.steps.podcastCheckFeed.stageName}
        url: https://sqs.${self:provider.region}.amazonaws.com/${self:custom.global.awsAccountId}/${self:custom.steps.podcastCheckFeed.stageName}
      next: episodeDownload
    episodeDownload:
      name: b-episode-download
      stageName: ${self:service}-${self:custom.stage}-${self:custom.steps.episodeDownload.name}
      sqs:
        arn: arn:aws:sqs:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.steps.episodeDownload.stageName}
        url: https://sqs.${self:provider.region}.amazonaws.com/${self:custom.global.awsAccountId}/${self:custom.steps.episodeDownload.stageName}
      next: episodeSegmentStart
    episodeSegmentStart:
      name: c-episode-segment-start
      stageName: ${self:service}-${self:custom.stage}-${self:custom.steps.episodeSegmentStart.name}
      sqs:
        arn: arn:aws:sqs:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.steps.episodeSegmentStart.stageName}
        url: https://sqs.${self:provider.region}.amazonaws.com/${self:custom.global.awsAccountId}/${self:custom.steps.episodeSegmentStart.stageName}
      next: episodeSegmentPending
    episodeSegmentPending:
      name: d-episode-segment-pending
      stageName: ${self:service}-${self:custom.stage}-${self:custom.steps.episodeSegmentPending.name}
      sqs:
        arn: arn:aws:sqs:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.steps.episodeSegmentPending.stageName}
        url: https://sqs.${self:provider.region}.amazonaws.com/${self:custom.global.awsAccountId}/${self:custom.steps.episodeSegmentPending.stageName}
      next: episodeTranscribeStart
    episodeTranscribeStart:
      name: e-episode-transcribe-start
      stageName: ${self:service}-${self:custom.stage}-${self:custom.steps.episodeTranscribeStart.name}
      sqs:
        arn: arn:aws:sqs:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.steps.episodeTranscribeStart.stageName}
        url: https://sqs.${self:provider.region}.amazonaws.com/${self:custom.global.awsAccountId}/${self:custom.steps.episodeTranscribeStart.stageName}
      next: episodeTranscribePending
    awsTranscribeStart:
      name: f-aws-a-transcribe-start
      stageName: ${self:service}-${self:custom.stage}-${self:custom.steps.awsTranscribeStart.name}
      sqs:
        arn: arn:aws:sqs:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.steps.awsTranscribeStart.stageName}
        url: https://sqs.${self:provider.region}.amazonaws.com/${self:custom.global.awsAccountId}/${self:custom.steps.awsTranscribeStart.stageName}
      next: awsTranscribePending
    awsTranscribePending:
      name: f-aws-b-transcribe-pending
      stageName: ${self:service}-${self:custom.stage}-${self:custom.steps.awsTranscribePending.name}
      sqs:
        arn: arn:aws:sqs:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.steps.awsTranscribePending.stageName}
        url: https://sqs.${self:provider.region}.amazonaws.com/${self:custom.global.awsAccountId}/${self:custom.steps.awsTranscribePending.stageName}
      next: awsNormalize
    awsNormalize:
      name: f-aws-c-normalize
      stageName: ${self:service}-${self:custom.stage}-${self:custom.steps.awsNormalize.name}
      sqs:
        arn: arn:aws:sqs:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.steps.awsNormalize.stageName}
        url: https://sqs.${self:provider.region}.amazonaws.com/${self:custom.global.awsAccountId}/${self:custom.steps.awsNormalize.stageName}
    watsonTranscribeStart:
      name: f-watson-a-transcribe-start
      stageName: ${self:service}-${self:custom.stage}-${self:custom.steps.watsonTranscribeStart.name}
      sqs:
        arn: arn:aws:sqs:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.steps.watsonTranscribeStart.stageName}
        url: https://sqs.${self:provider.region}.amazonaws.com/${self:custom.global.awsAccountId}/${self:custom.steps.watsonTranscribeStart.stageName}
      next: watsonTranscribePending
    watsonTranscribePending:
      name: f-watson-b-transcribe-pending
      stageName: ${self:service}-${self:custom.stage}-${self:custom.steps.watsonTranscribePending.name}
      sqs:
        arn: arn:aws:sqs:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.steps.watsonTranscribePending.stageName}
        url: https://sqs.${self:provider.region}.amazonaws.com/${self:custom.global.awsAccountId}/${self:custom.steps.watsonTranscribePending.stageName}
      next: watsonNormalize
    watsonNormalize:
      name: f-watson-c-normalize
      stageName: ${self:service}-${self:custom.stage}-${self:custom.steps.watsonNormalize.name}
      sqs:
        arn: arn:aws:sqs:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.steps.watsonNormalize.stageName}
        url: https://sqs.${self:provider.region}.amazonaws.com/${self:custom.global.awsAccountId}/${self:custom.steps.watsonNormalize.stageName}
    episodeTranscribePending:
      name: h-episode-transcribe-pending
      stageName: ${self:service}-${self:custom.stage}-${self:custom.steps.episodeTranscribePending.name}
      sqs:
        arn: arn:aws:sqs:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.steps.episodeTranscribePending.stageName}
        url: https://sqs.${self:provider.region}.amazonaws.com/${self:custom.global.awsAccountId}/${self:custom.steps.episodeTranscribePending.stageName}
      next: episodeInsert
    episodeInsert:
      name: h-episode-transcribe-pending
      stageName: ${self:service}-${self:custom.stage}-${self:custom.steps.episodeInsert.name}
      sqs:
        arn: arn:aws:sqs:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.steps.episodeInsert.stageName}
        url: https://sqs.${self:provider.region}.amazonaws.com/${self:custom.global.awsAccountId}/${self:custom.steps.episodeInsert.stageName}

  dynamodb:
    podcasts:
      name: ${self:custom.global.product}-${self:custom.stage}-${self:custom.global.dynamodb.podcasts.suffix}
      arn: arn:aws:dynamodb:${self:provider.region}:${self:custom.global.awsAccountId}:table/${self:custom.dynamodb.podcasts.name}
    episodes:
      name: ${self:custom.global.product}-${self:custom.stage}-${self:custom.global.dynamodb.episodes.suffix}
      arn: arn:aws:dynamodb:${self:provider.region}:${self:custom.global.awsAccountId}:table/${self:custom.dynamodb.episodes.name}
    statements:
      name: ${self:custom.global.product}-${self:custom.stage}-${self:custom.global.dynamodb.statements.suffix}
      arn: arn:aws:dynamodb:${self:provider.region}:${self:custom.global.awsAccountId}:table/${self:custom.dynamodb.statements.name}
    speakers:
      name: ${self:custom.global.product}-${self:custom.stage}-${self:custom.global.dynamodb.speakers.suffix}
      arn: arn:aws:dynamodb:${self:provider.region}:${self:custom.global.awsAccountId}:table/${self:custom.dynamodb.speakers.name}
    jobs:
      name: ${self:custom.global.product}-${self:custom.stage}-${self:custom.global.dynamodb.jobs.suffix}
      arn: arn:aws:dynamodb:${self:provider.region}:${self:custom.global.awsAccountId}:table/${self:custom.dynamodb.jobs.name}

  sns:
    topics:
      errors:
        name: ${self:service}-${self:custom.stage}-errors
        arn: arn:aws:sns:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.sns.topics.errors.name}
      status:
        name: ${self:service}-${self:custom.stage}-status
        arn: arn:aws:sns:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.sns.topics.status.name}

  transcoder:
    jobs:
      arn: arn:aws:elastictranscoder:${self:provider.region}:${self:custom.global.awsAccountId}:job/*
    presets:
      arn: arn:aws:elastictranscoder:${self:provider.region}:${self:custom.global.awsAccountId}:preset/*
    pipeline:
      ids:
        prod: 1535242598418-8hy4nc
        test: 1531803024408-reo2a2
        ian: 1534397495629-rlv3fd
        andrew: 1535242456767-0vcu3n
      id: ${self:custom.transcoder.pipeline.ids.${self:custom.stage}}
      arn: arn:aws:elastictranscoder:${self:provider.region}:${self:custom.global.awsAccountId}:pipeline/${self:custom.transcoder.pipeline.id}

  secrets:
    watson:
      transcribe:
        credentials:
          name: watson_transcribe_credentials
          arn: arn:aws:secretsmanager:${self:provider.region}:${self:custom.global.awsAccountId}:secret:watson_transcribe_credentials-rRBeuP

provider:
  name: aws
  runtime: nodejs8.10
  region: ${self:custom.global.region}
  stage: ${self:custom.stage}
  environment:
    PODCASTS_TABLE: ${self:custom.dynamodb.podcasts.name}
    EPISODES_TABLE: ${self:custom.dynamodb.episodes.name}
    STATEMENTS_TABLE: ${self:custom.dynamodb.statements.name}
    SPEAKERS_TABLE: ${self:custom.dynamodb.speakers.name}
    JOBS_TABLE: ${self:custom.dynamodb.jobs.name}
    INSERT_LIMIT: ${self:custom.episodeInsertLimit}
    ERROR_TOPIC: ${self:custom.sns.topics.errors.arn}
    STATUS_TOPIC: ${self:custom.sns.topics.status.arn}
    BUCKET: ${self:custom.bucket}
  iamRoleStatements:
    #
    # S3 Bucket Permissions
    #
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
      Resource:
        - arn:aws:s3:::${self:custom.bucket}/*

    #
    # DynamoDB Table Permissions
    #
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
        - dynamodb:BatchWriteItem
        - dynamodb:DescribeTable
      Resource:
        - ${self:custom.dynamodb.podcasts.arn}
        - ${self:custom.dynamodb.episodes.arn}
        - ${self:custom.dynamodb.speakers.arn}
        - ${self:custom.dynamodb.statements.arn}
        - ${self:custom.dynamodb.jobs.arn}

    #
    # SNS Topic Publish Permissions
    #
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource:
        - ${self:custom.sns.topics.errors.arn}
        - ${self:custom.sns.topics.status.arn}

    #
    # SQS Send and Receive Permissions
    #
    - Effect: Allow
      Action:
        - SQS:ReceiveMessage
        - SQS:SendMessage
      Resource:
        - ${self:custom.steps.podcastCheckFeed.sqs.arn}
        - ${self:custom.steps.episodeDownload.sqs.arn}
        - ${self:custom.steps.episodeSegmentStart.sqs.arn}
        - ${self:custom.steps.episodeSegmentPending.sqs.arn}
        - ${self:custom.steps.episodeTranscribeStart.sqs.arn}
        - ${self:custom.steps.awsTranscribeStart.sqs.arn}
        - ${self:custom.steps.awsTranscribePending.sqs.arn}
        - ${self:custom.steps.awsNormalize.sqs.arn}
        - ${self:custom.steps.watsonTranscribeStart.sqs.arn}
        - ${self:custom.steps.watsonTranscribePending.sqs.arn}
        - ${self:custom.steps.watsonNormalize.sqs.arn}
        - ${self:custom.steps.episodeTranscribePending.sqs.arn}
        - ${self:custom.steps.episodeInsert.sqs.arn}

    #
    # Transcoder Permissions
    #
    - Effect: Allow
      Action:
        - elastictranscoder:Read*
        - elastictranscoder:List*
        - elastictranscoder:*Job
      Resource:
        - ${self:custom.transcoder.jobs.arn}
        - ${self:custom.transcoder.presets.arn}
        - ${self:custom.transcoder.pipeline.arn}

    #
    # AWS Transcription Service Permissions
    #
    - Effect: Allow
      Action:
        - transcribe:StartTranscriptionJob
      Resource: '*'

    #
    # AWS Transcription Service Permissions
    #
    - Effect: Allow
      Action:
        - transcribe:StartTranscriptionJob
      Resource: '*'

    #
    # AWS Secrets Manager Permissions
    #
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: ${self:custom.secrets.watson.transcribe.credentials.arn}

functions:
  #
  # Fetch, transcode and split the audio files
  #
  podcastCheckFeed:
    name: ${self:custom.steps.podcastCheckFeed.stageName}
    handler: src/functions/pipeline/${self:custom.steps.podcastCheckFeed.name}.handler
    timeout: ${self:custom.timeout}
    environment:
      NEXT_QUEUE: ${self:custom.steps.${self:custom.steps.podcastCheckFeed.next}.sqs.url}
    events:
      - sqs:
          arn: ${self:custom.steps.podcastCheckFeed.sqs.arn}
          batchSize: 1

  episodeDownload:
    name: ${self:custom.steps.episodeDownload.stageName}
    handler: src/functions/pipeline/${self:custom.steps.episodeDownload.name}.handler
    timeout: ${self:custom.timeout}
    environment:
      NEXT_QUEUE: ${self:custom.steps.${self:custom.steps.episodeDownload.next}.sqs.url}
    events:
      - sqs:
          arn: ${self:custom.steps.episodeDownload.sqs.arn}
          batchSize: 1

  episodeSegmentStart:
    name: ${self:custom.steps.episodeSegmentStart.stageName}
    handler: src/functions/pipeline/${self:custom.steps.episodeSegmentStart.name}.handler
    timeout: ${self:custom.timeout}
    environment:
      NEXT_QUEUE: ${self:custom.steps.${self:custom.steps.episodeSegmentStart.next}.sqs.url}
      TRANSCODE_PIPELINE_ID: ${self:custom.transcoder.pipeline.id}
    events:
      - sqs:
          arn: ${self:custom.steps.episodeSegmentStart.sqs.arn}
          batchSize: 1

  episodeSegmentPending:
    name: ${self:custom.steps.episodeSegmentPending.stageName}
    handler: src/functions/pipeline/${self:custom.steps.episodeSegmentPending.name}.handler
    timeout: ${self:custom.timeout}
    environment:
      NEXT_QUEUE: ${self:custom.steps.${self:custom.steps.episodeSegmentPending.next}.sqs.url}
      TRANSCODE_PIPELINE_ID: ${self:custom.transcoder.pipeline.id}
    events:
      - sqs:
          arn: ${self:custom.steps.episodeSegmentPending.sqs.arn}
          batchSize: 1

  episodeTranscribeStart:
    name: ${self:custom.steps.episodeTranscribeStart.stageName}
    handler: src/functions/pipeline/${self:custom.steps.episodeTranscribeStart.name}.handler
    timeout: ${self:custom.timeout}
    environment:
      AWS_TRANSCRIBE_QUEUE: ${self:custom.steps.awsTranscribeStart.sqs.url}
      WATSON_TRANSCRIBE_QUEUE: ${self:custom.steps.watsonTranscribeStart.sqs.url}
      NEXT_QUEUE: ${self:custom.steps.${self:custom.steps.episodeTranscribeStart.next}.sqs.url}
    events:
      - sqs:
          arn: ${self:custom.steps.episodeTranscribeStart.sqs.arn}
          batchSize: 1

  #
  # AWS Transcribe, normalize, and zip
  #
  awsTranscribeStart:
    name: ${self:custom.steps.awsTranscribeStart.stageName}
    handler: src/functions/pipeline/e-aws-transcribe/${self:custom.steps.awsTranscribeStart.name}.handler
    timeout: ${self:custom.timeout}
    environment:
      NEXT_QUEUE: ${self:custom.steps.${self:custom.steps.awsTranscribeStart.next}.sqs.url}
    events:
      - sqs:
          arn: ${self:custom.steps.awsTranscribeStart.sqs.arn}
          batchSize: 1

  awsTranscribePending:
    name: ${self:custom.steps.awsTranscribePending.stageName}
    handler: src/functions/pipeline/${self:custom.steps.awsTranscribePending.name}.handler
    timeout: ${self:custom.timeout}
    environment:
      NEXT_QUEUE: ${self:custom.steps.${self:custom.steps.awsTranscribePending.next}.sqs.url}
    events:
      - sqs:
          arn: ${self:custom.steps.awsTranscribePending.sqs.arn}
          batchSize: 1

  awsNormalize:
    name: ${self:custom.steps.awsNormalize.stageName}
    handler: src/functions/pipeline/${self:custom.steps.awsNormalize.name}.handler
    timeout: ${self:custom.timeout}
    events:
      - sqs:
          arn: ${self:custom.steps.awsNormalize.sqs.arn}
          batchSize: 1

  #
  # Watson Transcribe, download, normalize and zip
  #
  watsonTranscribeStart:
    name: ${self:custom.steps.watsonTranscribeStart.stageName}
    handler: src/functions/pipeline/${self:custom.steps.watsonTranscribeStart.name}.handler
    timeout: ${self:custom.timeout}
    environment:
      NEXT_QUEUE: ${self:custom.steps.${self:custom.steps.watsonTranscribeStart.next}.sqs.url}
    events:
      - sqs:
          arn: ${self:custom.steps.watsonTranscribeStart.sqs.arn}
          batchSize: 1

  watsonTranscribePending:
    name: ${self:custom.steps.watsonTranscribePending.stageName}
    handler: src/functions/pipeline/${self:custom.steps.watsonTranscribePending.name}.handler
    timeout: ${self:custom.timeout}
    environment:
      NEXT_QUEUE: ${self:custom.steps.${self:custom.steps.watsonTranscribePending.next}.sqs.url}
      WATSON_TRANSCRIBE_CREDENTIALS: ${self:custom.secrets.watson.transcribe.credentials.name}
    events:
      - sqs:
          arn: ${self:custom.steps.watsonTranscribePending.sqs.arn}
          batchSize: 1

  watsonNormalize:
    name: ${self:custom.steps.watsonNormalize.stageName}
    handler: src/functions/pipeline/${self:custom.steps.watsonNormalize.name}.handler
    timeout: ${self:custom.timeout}
    events:
      - sqs:
          arn: ${self:custom.steps.watsonNormalize.sqs.arn}
          batchSize: 1

  #
  # Combine the normalized and zipped AWS and Watson transcriptions
  # and insert them into DynamoDB
  #
  episodeTranscribePending:
    name: ${self:custom.steps.episodeTranscribePending.stageName}
    handler: src/functions/pipeline/${self:custom.steps.episodeTranscribePending}.handler
    timeout: ${self:custom.timeout}
    environment:
      NEXT_QUEUE: ${self:custom.steps.${self:custom.steps.episodeTranscribePending.next}.sqs.url}
    events:
      - sqs:
          arn: ${self:custom.steps.episodeTranscribePending.sqs.arn}
          batchSize: 1

  episodeInsert:
    name: ${self:custom.steps.episodeInsert.stageName}
    handler: src/functions/pipeline/${self:custom.steps.episodeInsert}.handler
    timeout: ${self:custom.timeout}
    environment:
      STATEMENTS_TABLE_WCU: ${self:custom.global.dynamodb.statements.wcu}
    events:
      - sqs:
          arn: ${self:custom.steps.episodeInsert.sqs.arn}
          batchSize: 1
    reservedConcurrency: 1

resources:
  Resources:
    #
    # S3 Bucket
    #
    bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucket}

    #
    # SNS for Errors
    #
    errorSNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Boombox Pipeline Errors (${self:custom.stage})
        TopicName: ${self:custom.sns.topics.errors.name}

    errorSNSSubscription:
      Type: AWS::SNS::Subscription
      DependsOn:
        - errorSNSTopic
      Properties:
        Endpoint: boombox-pipeline-errors@googlegroups.com
        Protocol: 'email'
        TopicArn: ${self:custom.sns.topics.errors.arn}

    #
    # SNS for Status Updates
    #
    statusSNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Boombox Pipeline Status (${self:custom.stage})
        TopicName: ${self:custom.sns.topics.status.name}

    statusSNSSubscription:
      Type: AWS::SNS::Subscription
      DependsOn:
        - statusSNSTopic
      Properties:
        Endpoint: boombox-pipeline-status@googlegroups.com
        Protocol: 'email'
        TopicArn: ${self:custom.sns.topics.status.arn}

    #
    # SQS Queues
    #
    podcastCheckFeedQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:custom.steps.podcastCheckFeed.stageName}
        VisibilityTimeout: 60

    episodeDownloadQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:custom.steps.episodeDownload.stageName}
        VisibilityTimeout: 60

    episodeSegmentStartQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:custom.steps.episodeSegmentStart.stageName}
        VisibilityTimeout: 60

    episodeSegmentPendingQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:custom.steps.episodeSegmentPending.stageName}
        VisibilityTimeout: 60

    episodeTranscribeStartQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:custom.steps.episodeTranscribeStart.stageName}
        VisibilityTimeout: 60

    awsTranscribeStartQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:custom.steps.awsTranscribeStart.stageName}

    awsTranscribePendingQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:custom.steps.awsTranscribePending.stageName}
        VisibilityTimeout: 60

    awsNormalizeQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:custom.steps.awsNormalize.stageName}
        VisibilityTimeout: 60

    watsonTranscribeStartQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:custom.steps.watsonTranscribeStart.stageName}
        VisibilityTimeout: 60

    watsonTranscribePendingQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:custom.steps.watsonTranscribePending.stageName}
        VisibilityTimeout: 60

    watsonNormalizeQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:custom.steps.watsonNormalize.stageName}
        VisibilityTimeout: 60

    episodeTranscribePendingQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:custom.steps.episodeTranscribePending.stageName}
        VisibilityTimeout: 60

    episodeInsertQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:custom.steps.episodeInsert.stageName}
        VisibilityTimeout: 60

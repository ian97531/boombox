service: ${self:custom.global.product}-${self:custom.component}

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-domain-manager

package:
  exclude:
    - '**/*.ts'

custom:
  component: pipelinets
  global: ${file(../serverless-global.yml)}

  specifiedStage: ${env:AWS_STAGE, opt:stage}
  stage: ${self:custom.specifiedStage, 'test'}

  episodeInsertLimit: '1'

  subdomains:
    prod: '${self:custom.component}.'
    test: ${self:custom.component}-${self:custom.global.environments.test}.
    ian: ${self:custom.component}-${self:custom.global.environments.ian}.
    andrew: ${self:custom.component}-${self:custom.global.environments.andrew}.

  subdomain: ${self:custom.subdomains.${self:custom.stage}}

  hostname: ${self:custom.subdomain}${self:custom.global.domain}

  customDomain:
    domainName: ${self:custom.hostname}
    certificateName: '*.${self:custom.global.domain}'
    basePath: ''
    stage: ${self:custom.stage}
    createRoute53Record: true

  buckets:
    transcriptions:
      aws:
        raw: ${self:service}-${self:custom.stage}-aws-raw-transcriptions
        normalized: ${self:service}-${self:custom.stage}-aws-normalized-transcriptions
        zipped: ${self:service}-${self:custom.stage}-aws-zipped-transcriptions
      watson:
        raw: ${self:service}-${self:custom.stage}-watson-raw-transcriptions
        normalized: ${self:service}-${self:custom.stage}-watson-normalized-transcriptions
        zipped: ${self:service}-${self:custom.stage}-watson-zipped-transcriptions
      combined: ${self:service}-${self:custom.stage}-combined-transcriptions
    audio:
      original: ${self:service}-${self:custom.stage}-episode-audio-original
      transcoded: ${self:service}-${self:custom.stage}-episode-audio-transcoded
      splits: ${self:service}-${self:custom.stage}-episode-audio-splits

  dynamodb:
    podcasts:
      name: ${self:custom.global.product}-${self:custom.stage}-${self:custom.global.dynamodb.podcasts.suffix}
      arn: arn:aws:dynamodb:${self:provider.region}:${self:custom.global.awsAccountId}:table/${self:custom.dynamodb.podcasts.name}
    episodes:
      name: ${self:custom.global.product}-${self:custom.stage}-${self:custom.global.dynamodb.episodes.suffix}
      arn: arn:aws:dynamodb:${self:provider.region}:${self:custom.global.awsAccountId}:table/${self:custom.dynamodb.episodes.name}
    statements:
      name: ${self:custom.global.product}-${self:custom.stage}-${self:custom.global.dynamodb.statements.suffix}
      arn: arn:aws:dynamodb:${self:provider.region}:${self:custom.global.awsAccountId}:table/${self:custom.dynamodb.statements.name}
    speakers:
      name: ${self:custom.global.product}-${self:custom.stage}-${self:custom.global.dynamodb.speakers.suffix}
      arn: arn:aws:dynamodb:${self:provider.region}:${self:custom.global.awsAccountId}:table/${self:custom.dynamodb.speakers.name}

  sns:
    topics:
      downloadPending:
        name: ${self:service}-${self:custom.stage}-download-pending
        arn: arn:aws:sns:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.sns.topics.downloadPending.name}
      transcodePending:
        name: ${self:service}-${self:custom.stage}-transcode-pending
        arn: arn:aws:sns:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.sns.topics.transcodePending.name}
      transcodeComplete:
        name: ${self:service}-${self:custom.stage}-transcode-complete
        arn: arn:aws:sns:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.sns.topics.transcodeComplete.name}
      permissionsComplete:
        name: ${self:service}-${self:custom.stage}-permissions-complete
        arn: arn:aws:sns:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.sns.topics.permissionsComplete.name}
      splitComplete:
        name: ${self:service}-${self:custom.stage}-split-complete
        arn: arn:aws:sns:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.sns.topics.splitComplete.name}
      normalizeAWSPending:
        name: ${self:service}-${self:custom.stage}-aws-normalize-pending
        arn: arn:aws:sns:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.sns.topics.normalizeAWSPending.name}
      normalizeAWSComplete:
        name: ${self:service}-${self:custom.stage}-aws-normalize-complete
        arn: arn:aws:sns:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.sns.topics.normalizeAWSComplete.name}
      reprocessTranscriptionAWS:
        name: ${self:service}-${self:custom.stage}-aws-reprocess-transcription
        arn: arn:aws:sns:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.sns.topics.reprocessTranscriptionAWS.name}
      downloadWatsonComplete:
        name: ${self:service}-${self:custom.stage}-watson-download-complete
        arn: arn:aws:sns:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.sns.topics.downloadWatsonComplete.name}
      reprocessTranscriptionWatson:
        name: ${self:service}-${self:custom.stage}-watson-reprocess-transcription
        arn: arn:aws:sns:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.sns.topics.reprocessTranscriptionWatson.name}
      normalizeWatsonComplete:
        name: ${self:service}-${self:custom.stage}-watson-normalize-complete
        arn: arn:aws:sns:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.sns.topics.normalizeWatsonComplete.name}
      zipComplete:
        name: ${self:service}-${self:custom.stage}-zip-complete
        arn: arn:aws:sns:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.sns.topics.zipComplete.name}
      combineComplete:
        name: ${self:service}-${self:custom.stage}-combine-complete
        arn: arn:aws:sns:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.sns.topics.combineComplete.name}
      errors:
        name: ${self:service}-${self:custom.stage}-errors
        arn: arn:aws:sns:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.sns.topics.errors.name}
      status:
        name: ${self:service}-${self:custom.stage}-status
        arn: arn:aws:sns:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.sns.topics.status.name}

  transcoder:
    jobs:
      arn: arn:aws:elastictranscoder:${self:provider.region}:${self:custom.global.awsAccountId}:job/*
    presets:
      arn: arn:aws:elastictranscoder:${self:provider.region}:${self:custom.global.awsAccountId}:preset/*
    pipelines:
      transcode:
        ids:
          prod: 1535242518671-hm5o2r
          test: 1531438545970-0z6rkw
          ian: 1534397153424-dv9bqz
          andrew: 1535242409796-nq5atx
        id: ${self:custom.transcoder.pipelines.transcode.ids.${self:custom.stage}}
        arn: arn:aws:elastictranscoder:${self:provider.region}:${self:custom.global.awsAccountId}:pipeline/${self:custom.transcoder.pipelines.transcode.id}
      split:
        ids:
          prod: 1535242598418-8hy4nc
          test: 1531803024408-reo2a2
          ian: 1534397495629-rlv3fd
          andrew: 1535242456767-0vcu3n
        id: ${self:custom.transcoder.pipelines.split.ids.${self:custom.stage}}
        arn: arn:aws:elastictranscoder:${self:provider.region}:${self:custom.global.awsAccountId}:pipeline/${self:custom.transcoder.pipelines.split.id}

  secrets:
    watson:
      transcribe:
        credentials:
          name: watson_transcribe_credentials
          arn: arn:aws:secretsmanager:${self:provider.region}:${self:custom.global.awsAccountId}:secret:watson_transcribe_credentials-rRBeuP

  apiGateway:
    baseURL: https://${self:custom.hostname}
    endpoints:
      watsonCallbacks:
        verify: /watson
        jobComplete: /watson
    urls:
      watsonCallbacks:
        verify: ${self:custom.apiGateway.baseURL}${self:custom.apiGateway.endpoints.watsonCallbacks.verify}
        jobComplete: ${self:custom.apiGateway.baseURL}${self:custom.apiGateway.endpoints.watsonCallbacks.jobComplete}

provider:
  name: aws
  runtime: nodejs8.10
  region: ${self:custom.global.region}
  stage: ${self:custom.stage}
  environment:
    PODCASTS_TABLE: ${self:custom.dynamodb.podcasts.name}
    EPISODES_TABLE: ${self:custom.dynamodb.episodes.name}
    STATEMENTS_TABLE: ${self:custom.dynamodb.statements.name}
    SPEAKERS_TABLE: ${self:custom.dynamodb.speakers.name}
    INSERT_LIMIT: ${self:custom.episodeInsertLimit}
    ERROR_TOPIC: ${self:custom.sns.topics.errors.arn}
    STATUS_TOPIC: ${self:custom.sns.topics.status.arn}
  iamRoleStatements:
    #
    # S3 Bucket Permissions
    #
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
      Resource:
        - arn:aws:s3:::${self:custom.buckets.transcriptions.aws.raw}/*
        - arn:aws:s3:::${self:custom.buckets.transcriptions.aws.normalized}/*
        - arn:aws:s3:::${self:custom.buckets.transcriptions.aws.zipped}/*
        - arn:aws:s3:::${self:custom.buckets.transcriptions.watson.raw}/*
        - arn:aws:s3:::${self:custom.buckets.transcriptions.watson.normalized}/*
        - arn:aws:s3:::${self:custom.buckets.transcriptions.watson.zipped}/*
        - arn:aws:s3:::${self:custom.buckets.transcriptions.combined}/*
        - arn:aws:s3:::${self:custom.buckets.audio.original}/*
        - arn:aws:s3:::${self:custom.buckets.audio.transcoded}/*
        - arn:aws:s3:::${self:custom.buckets.audio.splits}/*
    - Effect: Allow
      Action:
        - s3:PutObjectAcl
      Resource:
        - arn:aws:s3:::${self:custom.buckets.audio.original}/*
        - arn:aws:s3:::${self:custom.buckets.audio.transcoded}/*

    #
    # DynamoDB Table Permissions
    #
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
        - dynamodb:BatchWriteItem
        - dynamodb:DescribeTable
      Resource:
        - ${self:custom.dynamodb.podcasts.arn}
        - ${self:custom.dynamodb.episodes.arn}
        - ${self:custom.dynamodb.speakers.arn}
        - ${self:custom.dynamodb.statements.arn}

    #
    # SNS Topic Publish Permissions
    #
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource:
        - ${self:custom.sns.topics.downloadPending.arn}
        - ${self:custom.sns.topics.transcodePending.arn}
        - ${self:custom.sns.topics.transcodeComplete.arn}
        - ${self:custom.sns.topics.permissionsComplete.arn}
        - ${self:custom.sns.topics.splitComplete.arn}
        - ${self:custom.sns.topics.normalizeAWSPending.arn}
        - ${self:custom.sns.topics.normalizeAWSComplete.arn}
        - ${self:custom.sns.topics.reprocessTranscriptionAWS.arn}
        - ${self:custom.sns.topics.downloadWatsonComplete.arn}
        - ${self:custom.sns.topics.reprocessTranscriptionWatson.arn}
        - ${self:custom.sns.topics.normalizeWatsonComplete.arn}
        - ${self:custom.sns.topics.zipComplete.arn}
        - ${self:custom.sns.topics.combineComplete.arn}
        - ${self:custom.sns.topics.errors.arn}
        - ${self:custom.sns.topics.status.arn}

    #
    # Transcoder Permissions
    #
    - Effect: Allow
      Action:
        - elastictranscoder:Read*
        - elastictranscoder:List*
        - elastictranscoder:*Job
      Resource:
        - ${self:custom.transcoder.jobs.arn}
        - ${self:custom.transcoder.presets.arn}
        - ${self:custom.transcoder.pipelines.transcode.arn}
        - ${self:custom.transcoder.pipelines.split.arn}

    #
    # AWS Transcription Service Permissions
    #
    - Effect: Allow
      Action:
        - transcribe:StartTranscriptionJob
      Resource: '*'

    #
    # AWS Transcription Service Permissions
    #
    - Effect: Allow
      Action:
        - transcribe:StartTranscriptionJob
      Resource: '*'

    #
    # AWS Secrets Manager Permissions
    #
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: ${self:custom.secrets.watson.transcribe.credentials.arn}

functions:
  #
  # Fetch, transcode and split the audio files
  #
  podcasts-update-from-feed:
    name: ${self:service}-${self:custom.stage}-checkPodcastFeed
    handler: src/functions/pipeline/a-checkPodcastFeed.handler
    timeout: 300
    environment:
      COMPLETE_TOPIC: ${self:custom.sns.topics.downloadPending.arn}
  podcasts-download:
    name: ${self:service}-${self:custom.stage}-downloadPodcastEpisode
    handler: src/functions/pipeline/b-downloadPodcastEpisode.handler
    timeout: 300
    environment:
      OUTPUT_BUCKET: ${self:custom.buckets.audio.original}
      COMPLETE_TOPIC: ${self:custom.sns.topics.transcodePending.arn}
    events:
      - sns: ${self:custom.sns.topics.downloadPending.name}
  podcasts-transcode:
    name: ${self:service}-${self:custom.stage}-transcodeEpisodeAudio
    handler: src/functions/pipeline/c-transcodeEpisodeAudio.handler
    timeout: 60
    environment:
      TRANSCODE_PIPELINE_ID: ${self:custom.transcoder.pipelines.transcode.id}
    events:
      - sns: ${self:custom.sns.topics.transcodePending.name}
  podcasts-file-permissions:
    name: ${self:service}-${self:custom.stage}-updateEpisodeAccessControls
    handler: src/functions/pipeline/d-updateEpisodeAccessControls.handler
    timeout: 60
    environment:
      ORIGINAL_BUCKET: ${self:custom.buckets.audio.original}
      TRANSCODED_BUCKET: ${self:custom.buckets.audio.transcoded}
      COMPLETE_TOPIC: ${self:custom.sns.topics.permissionsComplete.arn}
    events:
      - sns: ${self:custom.sns.topics.transcodeComplete.name}
  podcasts-split:
    name: ${self:service}-${self:custom.stage}-splitEpisodeAudioIntoSegments
    handler: src/functions/pipeline/e-splitEpisodeAudioIntoSegments.handler
    timeout: 60
    environment:
      SPLIT_PIPELINE_ID: ${self:custom.transcoder.pipelines.split.id}
    events:
      - sns: ${self:custom.sns.topics.permissionsComplete.name}

  #
  # AWS Transcribe, normalize, and zip
  #
  aws-transcribe:
    name: ${self:service}-${self:custom.stage}-aws-transcribeAudioSegment
    handler: src/functions/pipeline/f-aws-transcribe/a-transcribeAudioSegment.handler
    timeout: 60
    environment:
      INPUT_BUCKET: ${self:custom.buckets.audio.splits}
      OUTPUT_BUCKET: ${self:custom.buckets.transcriptions.aws.raw}
      REGION: ${self:provider.region}
    events:
      - sns: ${self:custom.sns.topics.splitComplete.name}
  aws-transcribe-complete:
    name: ${self:service}-${self:custom.stage}-aws-transcribe-complete
    handler: src/functions/pipeline/f-aws-transcribe/b-fetchTranscriptionResult.handler
    timeout: 60
    environment:
      COMPLETE_TOPIC: ${self:custom.sns.topics.normalizeAWSPending.arn}
    events:
      - s3:
          bucket: ${self:custom.buckets.transcriptions.aws.raw}
          event: s3:ObjectCreated:*
  aws-normalize:
    name: ${self:service}-${self:custom.stage}-aws-normalizeSegmentTranscription
    handler: src/functions/pipeline/f-aws-transcribe/c-normalizeSegmentTranscription.handler
    timeout: 60
    environment:
      INPUT_BUCKET: ${self:custom.buckets.transcriptions.aws.raw}
      OUTPUT_BUCKET: ${self:custom.buckets.transcriptions.aws.normalized}
      COMPLETE_TOPIC: ${self:custom.sns.topics.normalizeAWSComplete.arn}
    events:
      - sns: ${self:custom.sns.topics.normalizeAWSPending.name}
      - sns: ${self:custom.sns.topics.reprocessTranscriptionAWS.name}
  aws-zip:
    name: ${self:service}-${self:custom.stage}-aws-zipNormalizedSegments
    handler: src/functions/pipeline/g-zipNormalizedSegments.handler
    timeout: 300
    environment:
      INPUT_BUCKET: ${self:custom.buckets.transcriptions.aws.normalized}
      OUTPUT_BUCKET: ${self:custom.buckets.transcriptions.aws.zipped}
      COMPLETE_TOPIC: ${self:custom.sns.topics.zipComplete.arn}
      TRANSCRIPTION_ATTRIBUTE: awsTranscription
    events:
      - sns: ${self:custom.sns.topics.normalizeAWSComplete.name}

  #
  # Watson Transcribe, download, normalize and zip
  #
  watson-transcribe:
    name: ${self:service}-${self:custom.stage}-watson-transcribeAudioSegment
    handler: src/functions/pipeline/f-watson-transcribe/a-transcribeAudioSegment.handler
    timeout: 300
    environment:
      INPUT_BUCKET: ${self:custom.buckets.audio.splits}
      WATSON_CALLBACK_URL: ${self:custom.apiGateway.urls.watsonCallbacks.jobComplete}
      WATSON_TRANSCRIBE_CREDENTIALS: ${self:custom.secrets.watson.transcribe.credentials.name}
    events:
      - sns: ${self:custom.sns.topics.splitComplete.name}
  watson-download:
    name: ${self:service}-${self:custom.stage}-watson-fetchTranscriptionResult
    handler: src/functions/pipeline/f-watson-transcribe/b-fetchTranscriptionResult.handler
    timeout: 30
    environment:
      OUTPUT_BUCKET: ${self:custom.buckets.transcriptions.watson.raw}
      WATSON_TRANSCRIBE_CREDENTIALS: ${self:custom.secrets.watson.transcribe.credentials.name}
      COMPLETE_TOPIC: ${self:custom.sns.topics.downloadWatsonComplete.arn}
    events:
      - http: 'POST ${self:custom.apiGateway.endpoints.watsonCallbacks.jobComplete}'
  watson-normalize:
    name: ${self:service}-${self:custom.stage}-watson-normalizeSegment
    handler: src/functions/pipeline/f-watson-transcribe/c-normalizeSegmentTranscription.handler
    timeout: 60
    environment:
      INPUT_BUCKET: ${self:custom.buckets.transcriptions.watson.raw}
      OUTPUT_BUCKET: ${self:custom.buckets.transcriptions.watson.normalized}
      COMPLETE_TOPIC: ${self:custom.sns.topics.normalizeWatsonComplete.arn}
    events:
      - sns: ${self:custom.sns.topics.downloadWatsonComplete.name}
      - sns: ${self:custom.sns.topics.reprocessTranscriptionWatson.name}
  watson-zip:
    name: ${self:service}-${self:custom.stage}-watson-zipNormalizedSegments
    handler: src/functions/pipeline/g-zipNormalizedSegments.handler
    timeout: 300
    environment:
      INPUT_BUCKET: ${self:custom.buckets.transcriptions.watson.normalized}
      OUTPUT_BUCKET: ${self:custom.buckets.transcriptions.watson.zipped}
      COMPLETE_TOPIC: ${self:custom.sns.topics.zipComplete.arn}
      TRANSCRIPTION_ATTRIBUTE: watsonTranscription
    events:
      - sns: ${self:custom.sns.topics.normalizeWatsonComplete.name}

  #
  # Combine the normalized and zipped AWS and Watson transcriptions
  # and insert them into DynamoDB
  #
  normalized-combine:
    name: ${self:service}-${self:custom.stage}-combineNormalizedTranscriptions
    handler: src/functions/pipeline/h-combineNormalizedTranscriptions.handler
    timeout: 300
    environment:
      AWS_INPUT_BUCKET: ${self:custom.buckets.transcriptions.aws.zipped}
      WATSON_INPUT_BUCKET: ${self:custom.buckets.transcriptions.watson.zipped}
      OUTPUT_BUCKET: ${self:custom.buckets.transcriptions.combined}
      COMPLETE_TOPIC: ${self:custom.sns.topics.combineComplete.arn}
    events:
      - sns: ${self:custom.sns.topics.zipComplete.name}
  normalized-insert:
    name: ${self:service}-${self:custom.stage}-insertTranscriptionIntoDynamoDB
    handler: src/functions/pipeline/i-insertTranscriptionIntoDynamoDB.handler
    timeout: 300
    environment:
      INPUT_BUCKET: ${self:custom.buckets.transcriptions.combined}
      STATEMENTS_WCU: ${self:custom.global.dynamodb.statements.wcu}
    events:
      - sns: ${self:custom.sns.topics.combineComplete.name}

  watson-verify:
    name: ${self:service}-${self:custom.stage}-api-verifyWatsonTranscriptionCallback
    handler: src/functions/api/verifyWatsonTranscriptionCallback.handler
    timeout: 30
    events:
      - http: 'GET ${self:custom.apiGateway.endpoints.watsonCallbacks.verify}'

resources:
  Resources:
    #
    # S3 Buckets for Audio Files
    #
    originalAudio:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.buckets.audio.original}
    transcodedAudio:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.buckets.audio.transcoded}
    splitAudio:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.buckets.audio.splits}

    #
    # S3 Buckets for Transcription JSON Files
    #
    normalizedAWSTranscriptions:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.buckets.transcriptions.aws.normalized}
    zippedAWSTranscriptions:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.buckets.transcriptions.aws.zipped}
    rawWatsonTranscriptions:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.buckets.transcriptions.watson.raw}
    normalizedWatsonTranscriptions:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.buckets.transcriptions.watson.normalized}
    zippedWatsonTranscriptions:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.buckets.transcriptions.watson.zipped}
    combinedTranscriptions:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.buckets.transcriptions.combined}

    #
    # SNS for Errors
    #
    errorSNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Boombox Pipeline Errors (${self:custom.stage})
        TopicName: ${self:custom.sns.topics.errors.name}

    errorSNSSubscription:
      Type: AWS::SNS::Subscription
      DependsOn:
        - errorSNSTopic
      Properties:
        Endpoint: boombox-pipeline-errors@googlegroups.com
        Protocol: 'email'
        TopicArn: ${self:custom.sns.topics.errors.arn}

    #
    # SNS for Errors
    #
    statusSNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Boombox Pipeline Status (${self:custom.stage})
        TopicName: ${self:custom.sns.topics.status.name}

    statusSNSSubscription:
      Type: AWS::SNS::Subscription
      DependsOn:
        - statusSNSTopic
      Properties:
        Endpoint: boombox-pipeline-status@googlegroups.com
        Protocol: 'email'
        TopicArn: ${self:custom.sns.topics.status.arn}

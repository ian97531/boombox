service: ${self:custom.global.product}-${self:custom.component}

plugins:
  - serverless-plugin-typescript

package:
  exclude:
    - '**/*.ts'

custom:
  component: pipelinets
  global: ${file(../serverless-global.yml)}

  specifiedStage: ${env:AWS_STAGE, opt:stage}
  stage: ${self:custom.specifiedStage, 'test'}

  episodeInsertLimit: '2'
  timeout: 300

  bucket: ${self:service}-${self:custom.stage}

  dynamodb:
    podcasts:
      name: ${self:custom.global.product}-${self:custom.stage}-${self:custom.global.dynamodb.podcasts.suffix}
      arn: arn:aws:dynamodb:${self:provider.region}:${self:custom.global.awsAccountId}:table/${self:custom.dynamodb.podcasts.name}
    episodes:
      name: ${self:custom.global.product}-${self:custom.stage}-${self:custom.global.dynamodb.episodes.suffix}
      arn: arn:aws:dynamodb:${self:provider.region}:${self:custom.global.awsAccountId}:table/${self:custom.dynamodb.episodes.name}
    statements:
      name: ${self:custom.global.product}-${self:custom.stage}-${self:custom.global.dynamodb.statements.suffix}
      arn: arn:aws:dynamodb:${self:provider.region}:${self:custom.global.awsAccountId}:table/${self:custom.dynamodb.statements.name}
    speakers:
      name: ${self:custom.global.product}-${self:custom.stage}-${self:custom.global.dynamodb.speakers.suffix}
      arn: arn:aws:dynamodb:${self:provider.region}:${self:custom.global.awsAccountId}:table/${self:custom.dynamodb.speakers.name}
    jobs:
      name: ${self:custom.global.product}-${self:custom.stage}-${self:custom.global.dynamodb.jobs.suffix}
      arn: arn:aws:dynamodb:${self:provider.region}:${self:custom.global.awsAccountId}:table/${self:custom.dynamodb.jobs.name}

  sns:
    topics:
      newEpisode:
        name: ${self:service}-${self:custom.stage}-new-episode
        arn: arn:aws:sns:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.sns.topics.newEpisode.name}
      episodeDownloadComplete:
        name: ${self:service}-${self:custom.stage}-episode-download-complete
        arn: arn:aws:sns:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.sns.topics.episodeDownloadComplete.name}
      episodeSplitStarted:
        name: ${self:service}-${self:custom.stage}-episode-split-started
        arn: arn:aws:sns:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.sns.topics.episodeSplitStarted.name}
      episodeSplitComplete:
        name: ${self:service}-${self:custom.stage}-episode-split-complete
        arn: arn:aws:sns:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.sns.topics.episodeSplitComplete.name}
      awsTranscribeStarted:
        name: ${self:service}-${self:custom.stage}-aws-transcribe-started
        arn: arn:aws:sns:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.sns.topics.awsTranscribeStarted.name}
      awsTranscribeComplete:
        name: ${self:service}-${self:custom.stage}-aws-transcribe-complete
        arn: arn:aws:sns:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.sns.topics.awsTranscribeComplete.name}
      awsNormalizeComplete:
        name: ${self:service}-${self:custom.stage}-aws-normalize-complete
        arn: arn:aws:sns:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.sns.topics.awsNormalizeComplete.name}
      watsonTranscribeStarted:
        name: ${self:service}-${self:custom.stage}-watson-transcribe-started
        arn: arn:aws:sns:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.sns.topics.watsonTranscribeStarted.name}
      watsonTranscribeComplete:
        name: ${self:service}-${self:custom.stage}-watson-transcribe-complete
        arn: arn:aws:sns:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.sns.topics.watsonTranscribeComplete.name}
      watsonNormalizeComplete:
        name: ${self:service}-${self:custom.stage}-watson-normalize-complete
        arn: arn:aws:sns:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.sns.topics.watsonNormalizeComplete.name}
      combineTranscriptionsComplete:
        name: ${self:service}-${self:custom.stage}-combine-complete
        arn: arn:aws:sns:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.sns.topics.combineTranscriptionsComplete.name}
      errors:
        name: ${self:service}-${self:custom.stage}-errors
        arn: arn:aws:sns:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.sns.topics.errors.name}
      status:
        name: ${self:service}-${self:custom.stage}-status
        arn: arn:aws:sns:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.sns.topics.status.name}

  transcoder:
    jobs:
      arn: arn:aws:elastictranscoder:${self:provider.region}:${self:custom.global.awsAccountId}:job/*
    presets:
      arn: arn:aws:elastictranscoder:${self:provider.region}:${self:custom.global.awsAccountId}:preset/*
    pipelines:
      split:
        ids:
          prod: 1535242598418-8hy4nc
          test: 1531803024408-reo2a2
          ian: 1534397495629-rlv3fd
          andrew: 1535242456767-0vcu3n
        id: ${self:custom.transcoder.pipelines.split.ids.${self:custom.stage}}
        arn: arn:aws:elastictranscoder:${self:provider.region}:${self:custom.global.awsAccountId}:pipeline/${self:custom.transcoder.pipelines.split.id}

  secrets:
    watson:
      transcribe:
        credentials:
          name: watson_transcribe_credentials
          arn: arn:aws:secretsmanager:${self:provider.region}:${self:custom.global.awsAccountId}:secret:watson_transcribe_credentials-rRBeuP

provider:
  name: aws
  runtime: nodejs8.10
  region: ${self:custom.global.region}
  stage: ${self:custom.stage}
  environment:
    PODCASTS_TABLE: ${self:custom.dynamodb.podcasts.name}
    EPISODES_TABLE: ${self:custom.dynamodb.episodes.name}
    STATEMENTS_TABLE: ${self:custom.dynamodb.statements.name}
    SPEAKERS_TABLE: ${self:custom.dynamodb.speakers.name}
    JOBS_TABLE: ${self:custom.dynamodb.jobs.name}
    INSERT_LIMIT: ${self:custom.episodeInsertLimit}
    ERROR_TOPIC: ${self:custom.sns.topics.errors.arn}
    STATUS_TOPIC: ${self:custom.sns.topics.status.arn}
    BUCKET: ${self:custom.bucket}
  iamRoleStatements:
    #
    # S3 Bucket Permissions
    #
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
      Resource:
        - arn:aws:s3:::${self:custom.bucket}/*

    #
    # DynamoDB Table Permissions
    #
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
        - dynamodb:BatchWriteItem
        - dynamodb:DescribeTable
      Resource:
        - ${self:custom.dynamodb.podcasts.arn}
        - ${self:custom.dynamodb.episodes.arn}
        - ${self:custom.dynamodb.speakers.arn}
        - ${self:custom.dynamodb.statements.arn}
        - ${self:custom.dynamodb.jobs.arn}

    #
    # SNS Topic Publish Permissions
    #
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource:
        - ${self:custom.sns.topics.newEpisode.arn}
        - ${self:custom.sns.topics.episodeDownloadComplete.arn}
        - ${self:custom.sns.topics.episodeSplitStarted.arn}
        - ${self:custom.sns.topics.episodeSplitComplete.arn}
        - ${self:custom.sns.topics.awsTranscribeStarted.arn}
        - ${self:custom.sns.topics.awsTranscribeComplete.arn}
        - ${self:custom.sns.topics.awsNormalizeComplete.arn}
        - ${self:custom.sns.topics.watsonTranscribeStarted.arn}
        - ${self:custom.sns.topics.watsonTranscribeComplete.arn}
        - ${self:custom.sns.topics.watsonNormalizeComplete.arn}
        - ${self:custom.sns.topics.zipComplete.arn}
        - ${self:custom.sns.topics.combineComplete.arn}
        - ${self:custom.sns.topics.errors.arn}
        - ${self:custom.sns.topics.status.arn}

    #
    # Transcoder Permissions
    #
    - Effect: Allow
      Action:
        - elastictranscoder:Read*
        - elastictranscoder:List*
        - elastictranscoder:*Job
      Resource:
        - ${self:custom.transcoder.jobs.arn}
        - ${self:custom.transcoder.presets.arn}
        - ${self:custom.transcoder.pipelines.transcode.arn}
        - ${self:custom.transcoder.pipelines.split.arn}

    #
    # AWS Transcription Service Permissions
    #
    - Effect: Allow
      Action:
        - transcribe:StartTranscriptionJob
      Resource: '*'

    #
    # AWS Transcription Service Permissions
    #
    - Effect: Allow
      Action:
        - transcribe:StartTranscriptionJob
      Resource: '*'

    #
    # AWS Secrets Manager Permissions
    #
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: ${self:custom.secrets.watson.transcribe.credentials.arn}

functions:
  #
  # Fetch, transcode and split the audio files
  #
  a-checkPodcastFeed:
    name: ${self:service}-${self:custom.stage}-a-checkPodcastFeed
    handler: src/functions/pipeline/a-checkPodcastFeed.handler
    timeout: ${self:custom.timeout}
    environment:
      COMPLETION_TOPIC: ${self:custom.sns.topics.newEpisode.arn}
  b-downloadPodcastEpisode:
    name: ${self:service}-${self:custom.stage}-b-downloadPodcastEpisode
    handler: src/functions/pipeline/b-downloadPodcastEpisode.handler
    timeout: ${self:custom.timeout}
    environment:
      COMPLETION_TOPIC: ${self:custom.sns.topics.episodeDownloadComplete.arn}
    events:
      - sns: ${self:custom.sns.topics.newEpisode.name}
  c-splitEpisodeAudioIntoSegmentsStart:
    name: ${self:service}-${self:custom.stage}-c-splitEpisodeAudioIntoSegmentsStart
    handler: src/functions/pipeline/c-splitEpisodeAudioIntoSegmentsStart.handler
    timeout: ${self:custom.timeout}
    environment:
      COMPLETION_TOPIC: ${self:custom.sns.topics.episodeSplitStarted.arn}
      SPLIT_PIPELINE_ID: ${self:custom.transcoder.pipelines.split.id}
    events:
      - sns: ${self:custom.sns.topics.permissionsComplete.name}
  d-splitEpisodeAudioIntoSegmentsComplete:
    name: ${self:service}-${self:custom.stage}-d-splitEpisodeAudioIntoSegmentsComplete
    handler: src/functions/pipeline/d-splitEpisodeAudioIntoSegmentsComplete.handler
    timeout: ${self:custom.timeout}
    environment:
      COMPLETION_TOPIC: ${self:custom.sns.topics.episodeSplitComplete.arn}
      SPLIT_PIPELINE_ID: ${self:custom.transcoder.pipelines.split.id}
    events:
      - sns: ${self:custom.sns.topics.episodeSplitStarted.name}

  #
  # AWS Transcribe, normalize, and zip
  #
  e-aws-a-transcribeAudioSegment:
    name: ${self:service}-${self:custom.stage}-e-aws-a-transcribeAudioSegment
    handler: src/functions/pipeline/e-aws-transcribe/a-transcribeAudioSegment.handler
    timeout: ${self:custom.timeout}
    environment:
      COMPLETION_TOPIC: ${self:custom.sns.topics.awsTranscribeStarted.arn}
    events:
      - sns: ${self:custom.sns.topics.episodeSplitComplete.name}

  e-aws-b-transcribeAudioSegmentComplete:
    name: ${self:service}-${self:custom.stage}-e-aws-b-transcribeAudioSegmentComplete
    handler: src/functions/pipeline/e-aws-transcribe/b-transcribeAudioSegmentComplete.handler
    timeout: ${self:custom.timeout}
    environment:
      COMPLETION_TOPIC: ${self:custom.sns.topics.awsTranscribeComplete.arn}
    events:
      - sns: ${self:custom.sns.topics.awsTranscribeStarted.name}

  e-aws-c-normalizeTranscription:
    name: ${self:service}-${self:custom.stage}-e-aws-c-normalizeTranscription
    handler: src/functions/pipeline/e-aws-transcribe/c-normalizeTranscription.handler
    timeout: ${self:custom.timeout}
    environment:
      COMPLETION_TOPIC: ${self:custom.sns.topics.awsNormalizeComplete.arn}
    events:
      - sns: ${self:custom.sns.topics.awsTranscribeComplete.name}

  #
  # Watson Transcribe, download, normalize and zip
  #
  e-watson-a-transcribeAudioSegment:
    name: ${self:service}-${self:custom.stage}-e-watson-a-transcribeAudioSegment
    handler: src/functions/pipeline/e-watson-transcribe/a-transcribeAudioSegment.handler
    timeout: ${self:custom.timeout}
    environment:
      COMPLETION_TOPIC: ${self:custom.sns.topics.watsonTranscribeStarted.arn}
    events:
      - sns: ${self:custom.sns.topics.episodeSplitComplete.name}
  e-watson-b-transcribeAudioSegmentComplete:
    name: ${self:service}-${self:custom.stage}-e-watson-b-transcribeAudioSegmentComplete
    handler: src/functions/pipeline/e-watson-transcribe/b-transcribeAudioSegmentComplete.handler
    timeout: ${self:custom.timeout}
    environment:
      WATSON_TRANSCRIBE_CREDENTIALS: ${self:custom.secrets.watson.transcribe.credentials.name}
      COMPLETION_TOPIC: ${self:custom.sns.topics.watsonTranscribeComplete.arn}
    events:
      - sns: ${self:custom.sns.topics.watsonTranscribeStarted.name}
  e-watson-c-normalizeTranscription:
    name: ${self:service}-${self:custom.stage}-e-watson-c-normalizeTranscription
    handler: src/functions/pipeline/e-watson-transcribe/c-normalizeTranscription.handler
    timeout: ${self:custom.timeout}
    environment:
      COMPLETION_TOPIC: ${self:custom.sns.topics.watsonNormalizeComplete.arn}
    events:
      - sns: ${self:custom.sns.topics.watsonTranscribeComplete.name}

  #
  # Combine the normalized and zipped AWS and Watson transcriptions
  # and insert them into DynamoDB
  #
  g-combineAwsAndWatsonTranscriptions:
    name: ${self:service}-${self:custom.stage}-g-combineAwsAndWatsonTranscriptions
    handler: src/functions/pipeline/g-combineAwsAndWatsonTranscriptions.handler
    timeout: ${self:custom.timeout}
    environment:
      COMPLETION_TOPIC: ${self:custom.sns.topics.combineTranscriptionsComplete.arn}
    events:
      - sns: ${self:custom.sns.topics.awsTranscribeComplete.name}
      - sns: ${self:custom.sns.topics.watsonTranscribeComplete.name}
  h-insertTranscriptionIntoDynamoDB:
    name: ${self:service}-${self:custom.stage}-h-insertTranscriptionIntoDynamoDB
    handler: src/functions/pipeline/h-insertTranscriptionIntoDynamoDB.handler
    timeout: ${self:custom.timeout}
    environment:
      STATEMENTS_WCU: ${self:custom.global.dynamodb.statements.wcu}
    events:
      - sns: ${self:custom.sns.topics.combineTranscriptionsComplete.name}

resources:
  Resources:
    #
    # S3 Bucket
    #
    bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucket}

    #
    # SNS for Errors
    #
    errorSNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Boombox Pipeline Errors (${self:custom.stage})
        TopicName: ${self:custom.sns.topics.errors.name}

    errorSNSSubscription:
      Type: AWS::SNS::Subscription
      DependsOn:
        - errorSNSTopic
      Properties:
        Endpoint: boombox-pipeline-errors@googlegroups.com
        Protocol: 'email'
        TopicArn: ${self:custom.sns.topics.errors.arn}

    #
    # SNS for Errors
    #
    statusSNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Boombox Pipeline Status (${self:custom.stage})
        TopicName: ${self:custom.sns.topics.status.name}

    statusSNSSubscription:
      Type: AWS::SNS::Subscription
      DependsOn:
        - statusSNSTopic
      Properties:
        Endpoint: boombox-pipeline-status@googlegroups.com
        Protocol: 'email'
        TopicArn: ${self:custom.sns.topics.status.arn}

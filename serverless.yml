service: boombox2

plugins:
  - serverless-python-requirements

custom:
  stage: ${opt:stage, 'dev'}
  AWSTranscriptions: ${self:service}-${self:custom.stage}-aws-transcriptions
  normalizedAWSTranscriptions: ${self:service}-${self:custom.stage}-normalized-aws-transcriptions
  watsonTranscriptions: ${self:service}-${self:custom.stage}-watson-transcriptions
  normalizedWatsonTranscriptions: ${self:service}-${self:custom.stage}-normalized-watson-transcriptions
  combinedTranscriptions: ${self:service}-${self:custom.stage}-combined-transcriptions
  activeJobsTable: ${self:service}-${self:custom.stage}-podcast-jobs
  podcastsTable: ${self:service}-${self:custom.stage}-podcasts

package:
  exclude:
    - node_modules/**
    - .requirements/**
    - .idea/**
    - env/**
    - package.json
    - package-lock.json
    - requirements.txt
    - LICENSE
    - .gitignore

provider:
  name: aws
  runtime: python2.7
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
      Resource: 
        - arn:aws:s3:::${self:custom.AWSTranscriptions}/*
        - arn:aws:s3:::${self:custom.normalizedAWSTranscriptions}/*
        - arn:aws:s3:::${self:custom.watsonTranscriptions}/*
        - arn:aws:s3:::${self:custom.normalizedWatsonTranscriptions}/*
        - arn:aws:s3:::${self:custom.combinedTranscriptions}/*
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: 
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.activeJobsTable}
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.podcastsTable}

functions:
  podcasts-update-from-feed:
    name: ${self:service}-${self:custom.stage}-podcasts-update-from-feed
    handler: podcasts.checkRSSFeed
    timeout: 300
  podcasts-download:
    name: ${self:service}-${self:custom.stage}-podcasts-download
    handler: podcasts.download
    timeout: 300
  aws-normalize:
    name: ${self:service}-${self:custom.stage}-aws-normalize
    handler: aws.normalize
    timeout: 60
    environment:
      OUTPUT_BUCKET: ${self:custom.normalizedAWSTranscriptions}
    events:
      - s3:
          bucket: ${self:custom.AWSTranscriptions}
          event: s3:ObjectCreated:*
  watson-normalize:
    name: ${self:service}-${self:custom.stage}-watson-normalize
    handler: watson.normalize
    timeout: 60
    environment:
      OUTPUT_BUCKET: ${self:custom.normalizedWatsonTranscriptions}
    events:
      - s3:
          bucket: ${self:custom.watsonTranscriptions}
          event: s3:ObjectCreated:*
  normalized-combine:
    name: ${self:service}-${self:custom.stage}-normalized-combine
    handler: normalized.combine
    timeout: 300
    environment:
      AWS_INPUT_BUCKET: ${self:custom.normalizedAWSTranscriptions}
      WATSON_INPUT_BUCKET: ${self:custom.normalizedWatsonTranscriptions}
      OUTPUT_BUCKET: ${self:custom.combinedTranscriptions}
    events:
      - s3:
          bucket: ${self:custom.normalizedAWSTranscriptions}
          event: s3:ObjectCreated:*
      - s3:
          bucket: ${self:custom.normalizedWatsonTranscriptions}
          event: s3:ObjectCreated:*

resources:
  Resources:
    combinedtranscriptions:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.combinedTranscriptions}
    activeJobsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.activeJobsTable}
        AttributeDefinitions:
          -
            AttributeName: jobId
            AttributeType: S
          -
            AttributeName: startDate
            AttributeType: S
        KeySchema:
          -
            AttributeName: jobId
            KeyType: HASH
          - AttributeName: startDate
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    podcastsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.podcastsTable}
        AttributeDefinitions:
          -
            AttributeName: feedURL
            AttributeType: S
        KeySchema:
          -
            AttributeName: feedURL
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
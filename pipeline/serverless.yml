service: ${self:custom.global.product}-${self:custom.component}

plugins:
  - serverless-plugin-typescript

package:
  exclude:
    - '**/*.ts'

custom:
  component: pipeline
  global: ${file(../serverless-global.yml)}

  specifiedStage: ${env:AWS_STAGE, opt:stage}
  stage: ${self:custom.specifiedStage, 'test'}

  timeout: 300

  buckets:
    episode: ${self:service}-${self:custom.stage}
    segments: boombox-pipeline-segments
    transcriptions: boombox-pipeline-transcriptions

  steps:
    podcastCheckFeed:
      name: a-podcast-check-feed
      stageName: ${self:service}-${self:custom.stage}-${self:custom.steps.podcastCheckFeed.name}
      sqs:
        arn: arn:aws:sqs:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.steps.podcastCheckFeed.stageName}
        url: https://sqs.${self:provider.region}.amazonaws.com/${self:custom.global.awsAccountId}/${self:custom.steps.podcastCheckFeed.stageName}
    episodeDownload:
      name: b-episode-download
      stageName: ${self:service}-${self:custom.stage}-${self:custom.steps.episodeDownload.name}
      sqs:
        arn: arn:aws:sqs:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.steps.episodeDownload.stageName}
        url: https://sqs.${self:provider.region}.amazonaws.com/${self:custom.global.awsAccountId}/${self:custom.steps.episodeDownload.stageName}
    episodeSegment:
      name: c-episode-segment
      stageName: ${self:service}-${self:custom.stage}-${self:custom.steps.episodeSegment.name}
      sqs:
        arn: arn:aws:sqs:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.steps.episodeSegment.stageName}
        url: https://sqs.${self:provider.region}.amazonaws.com/${self:custom.global.awsAccountId}/${self:custom.steps.episodeSegment.stageName}
    episodeTranscribe:
      name: d-episode-transcribe
      stageName: ${self:service}-${self:custom.stage}-${self:custom.steps.episodeTranscribe.name}
      sqs:
        arn: arn:aws:sqs:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.steps.episodeTranscribe.stageName}
        url: https://sqs.${self:provider.region}.amazonaws.com/${self:custom.global.awsAccountId}/${self:custom.steps.episodeTranscribe.stageName}
    episodeNormalize:
      name: e-episode-normalize
      stageName: ${self:service}-${self:custom.stage}-${self:custom.steps.episodeNormalize.name}
      sqs:
        arn: arn:aws:sqs:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.steps.episodeNormalize.stageName}
        url: https://sqs.${self:provider.region}.amazonaws.com/${self:custom.global.awsAccountId}/${self:custom.steps.episodeNormalize.stageName}
    episodeInsert:
      name: f-episode-insert
      stageName: ${self:service}-${self:custom.stage}-${self:custom.steps.episodeInsert.name}
      sqs:
        arn: arn:aws:sqs:${self:provider.region}:${self:custom.global.awsAccountId}:${self:custom.steps.episodeInsert.stageName}
        url: https://sqs.${self:provider.region}.amazonaws.com/${self:custom.global.awsAccountId}/${self:custom.steps.episodeInsert.stageName}

  dynamodb:
    podcasts:
      name: ${self:custom.global.product}-${self:custom.stage}-${self:custom.global.dynamodb.podcasts.suffix}
      arn: arn:aws:dynamodb:${self:provider.region}:${self:custom.global.awsAccountId}:table/${self:custom.dynamodb.podcasts.name}
    episodes:
      name: ${self:custom.global.product}-${self:custom.stage}-${self:custom.global.dynamodb.episodes.suffix}
      arn: arn:aws:dynamodb:${self:provider.region}:${self:custom.global.awsAccountId}:table/${self:custom.dynamodb.episodes.name}
    statements:
      name: ${self:custom.global.product}-${self:custom.stage}-${self:custom.global.dynamodb.statements.suffix}
      arn: arn:aws:dynamodb:${self:provider.region}:${self:custom.global.awsAccountId}:table/${self:custom.dynamodb.statements.name}
    speakers:
      name: ${self:custom.global.product}-${self:custom.stage}-${self:custom.global.dynamodb.speakers.suffix}
      arn: arn:aws:dynamodb:${self:provider.region}:${self:custom.global.awsAccountId}:table/${self:custom.dynamodb.speakers.name}
    jobs:
      name: ${self:custom.global.product}-${self:custom.stage}-${self:custom.global.dynamodb.jobs.suffix}
      arn: arn:aws:dynamodb:${self:provider.region}:${self:custom.global.awsAccountId}:table/${self:custom.dynamodb.jobs.name}

  transcoder:
    jobs:
      arn: arn:aws:elastictranscoder:${self:provider.region}:${self:custom.global.awsAccountId}:job/*
    presets:
      arn: arn:aws:elastictranscoder:${self:provider.region}:${self:custom.global.awsAccountId}:preset/*
    pipeline:
      ids:
        prod: 1535242598418-8hy4nc
        test: 1531803024408-reo2a2
        ian: 1534397495629-rlv3fd
        andrew: 1535242456767-0vcu3n
      id: ${self:custom.transcoder.pipeline.ids.${self:custom.stage}}
      arn: arn:aws:elastictranscoder:${self:provider.region}:${self:custom.global.awsAccountId}:pipeline/${self:custom.transcoder.pipeline.id}

  secrets:
    watson:
      transcribe:
        credentials:
          name: watson_transcribe_credentials
          arn: arn:aws:secretsmanager:${self:provider.region}:${self:custom.global.awsAccountId}:secret:watson_transcribe_credentials-rRBeuP

  logGroups:
    jobs:
      name: ${self:service}-${self:custom.stage}-job-logs
      arn: arn:aws:logs:${self:provider.region}:${self:custom.global.awsAccountId}:log-group:${self:custom.logGroups.jobs.name}

provider:
  name: aws
  runtime: nodejs8.10
  region: ${self:custom.global.region}
  stage: ${self:custom.stage}
  environment:
    PODCASTS_TABLE: ${self:custom.dynamodb.podcasts.name}
    EPISODES_TABLE: ${self:custom.dynamodb.episodes.name}
    STATEMENTS_TABLE: ${self:custom.dynamodb.statements.name}
    STATEMENTS_TABLE_WCU: ${self:custom.global.dynamodb.statements.wcu}
    SPEAKERS_TABLE: ${self:custom.dynamodb.speakers.name}
    JOBS_LOG_GROUP: ${self:custom.logGroups.jobs.name}
    JOBS_TABLE: ${self:custom.dynamodb.jobs.name}
    BUCKET: ${self:custom.buckets.episode}
    SEGMENTS_BUCKET: ${self:custom.buckets.segments}
    TRANSCRIPTIONS_BUCKET: ${self:custom.buckets.transcriptions}
    TRANSCODE_PIPELINE_ID: ${self:custom.transcoder.pipeline.id}
    WATSON_TRANSCRIBE_CREDENTIALS: ${self:custom.secrets.watson.transcribe.credentials.name}
    PODCAST_CHECK_FEED_QUEUE: ${self:custom.steps.podcastCheckFeed.sqs.url}
    EPISODE_DOWNLOAD_QUEUE: ${self:custom.steps.episodeDownload.sqs.url}
    EPISODE_SEGMENT_QUEUE: ${self:custom.steps.episodeSegment.sqs.url}
    EPISODE_TRANSCRIBE_QUEUE: ${self:custom.steps.episodeTranscribe.sqs.url}
    EPISODE_NORMALIZE_QUEUE: ${self:custom.steps.episodeNormalize.sqs.url}
    EPISODE_INSERT_QUEUE: ${self:custom.steps.episodeInsert.sqs.url}
  iamRoleStatements:
    #
    # S3 Bucket Permissions
    #
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:DeleteObject
      Resource:
        - arn:aws:s3:::${self:custom.buckets.episode}/*
        - arn:aws:s3:::${self:custom.buckets.segments}/*
        - arn:aws:s3:::${self:custom.buckets.transcriptions}/*

    #
    # DynamoDB Table Permissions
    #
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
        - dynamodb:BatchWriteItem
        - dynamodb:DescribeTable
      Resource:
        - ${self:custom.dynamodb.podcasts.arn}
        - ${self:custom.dynamodb.episodes.arn}
        - ${self:custom.dynamodb.speakers.arn}
        - ${self:custom.dynamodb.statements.arn}
        - ${self:custom.dynamodb.jobs.arn}

    #
    # SQS Send and Receive Permissions
    #
    - Effect: Allow
      Action:
        - SQS:ReceiveMessage
        - SQS:SendMessage
      Resource:
        - ${self:custom.steps.podcastCheckFeed.sqs.arn}
        - ${self:custom.steps.episodeDownload.sqs.arn}
        - ${self:custom.steps.episodeSegment.sqs.arn}
        - ${self:custom.steps.episodeTranscribe.sqs.arn}
        - ${self:custom.steps.episodeNormalize.sqs.arn}
        - ${self:custom.steps.episodeInsert.sqs.arn}

    #
    # Transcoder Permissions
    #
    - Effect: Allow
      Action:
        - elastictranscoder:Read*
        - elastictranscoder:List*
        - elastictranscoder:*Job
      Resource:
        - ${self:custom.transcoder.jobs.arn}
        - ${self:custom.transcoder.presets.arn}
        - ${self:custom.transcoder.pipeline.arn}

    #
    # AWS Transcription Service Permissions
    #
    - Effect: Allow
      Action:
        - transcribe:StartTranscriptionJob
      Resource: '*'

    #
    # AWS Transcription Service Permissions
    #
    - Effect: Allow
      Action:
        - transcribe:GetTranscriptionJob
        - transcribe:StartTranscriptionJob
      Resource: '*'

    #
    # AWS Secrets Manager Permissions
    #
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: ${self:custom.secrets.watson.transcribe.credentials.arn}

    #
    # AWS CloudWatch Logs Permissions
    #
    - Effect: Allow
      Action:
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: ${self:custom.logGroups.jobs.arn}:*

functions:
  #
  # Fetch, transcode and split the audio files
  #
  podcastCheckFeed:
    name: ${self:custom.steps.podcastCheckFeed.stageName}
    handler: src/functions/pipeline/${self:custom.steps.podcastCheckFeed.name}.handler
    timeout: ${self:custom.timeout}
    events:
      - sqs:
          arn: ${self:custom.steps.podcastCheckFeed.sqs.arn}
          batchSize: 1

  episodeDownload:
    name: ${self:custom.steps.episodeDownload.stageName}
    handler: src/functions/pipeline/${self:custom.steps.episodeDownload.name}.handler
    timeout: ${self:custom.timeout}
    events:
      - sqs:
          arn: ${self:custom.steps.episodeDownload.sqs.arn}
          batchSize: 1

  episodeSegment:
    name: ${self:custom.steps.episodeSegment.stageName}
    handler: src/functions/pipeline/${self:custom.steps.episodeSegment.name}.handler
    timeout: ${self:custom.timeout}
    events:
      - sqs:
          arn: ${self:custom.steps.episodeSegment.sqs.arn}
          batchSize: 1

  episodeTranscribe:
    name: ${self:custom.steps.episodeTranscribe.stageName}
    handler: src/functions/pipeline/${self:custom.steps.episodeTranscribe.name}.handler
    timeout: ${self:custom.timeout}
    events:
      - sqs:
          arn: ${self:custom.steps.episodeTranscribe.sqs.arn}
          batchSize: 1

  episodeNormalize:
    name: ${self:custom.steps.episodeNormalize.stageName}
    handler: src/functions/pipeline/${self:custom.steps.episodeNormalize.name}.handler
    timeout: ${self:custom.timeout}
    events:
      - sqs:
          arn: ${self:custom.steps.episodeNormalize.sqs.arn}
          batchSize: 1

  episodeInsert:
    name: ${self:custom.steps.episodeInsert.stageName}
    handler: src/functions/pipeline/${self:custom.steps.episodeInsert.name}.handler
    timeout: ${self:custom.timeout}
    events:
      - sqs:
          arn: ${self:custom.steps.episodeInsert.sqs.arn}
          batchSize: 1
    reservedConcurrency: 1

resources:
  Resources:
    #
    # S3 Bucket
    #
    bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.buckets.episode}

    #
    # SQS Queues
    #
    podcastCheckFeedQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:custom.steps.podcastCheckFeed.stageName}
        VisibilityTimeout: ${self:custom.timeout}

    episodeDownloadQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:custom.steps.episodeDownload.stageName}
        VisibilityTimeout: ${self:custom.timeout}

    episodeSegmentQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:custom.steps.episodeSegment.stageName}
        VisibilityTimeout: ${self:custom.timeout}

    episodeTranscribeQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:custom.steps.episodeTranscribe.stageName}
        VisibilityTimeout: ${self:custom.timeout}

    episodeNormalizeQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:custom.steps.episodeNormalize.stageName}
        VisibilityTimeout: ${self:custom.timeout}

    episodeInsertQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ${self:custom.steps.episodeInsert.stageName}
        VisibilityTimeout: ${self:custom.timeout}

    jobLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: ${self:custom.logGroups.jobs.name}

    jobsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamodb.jobs.name}
        AttributeDefinitions:
          - AttributeName: startTime
            AttributeType: S
        KeySchema:
          - AttributeName: startTime
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.global.dynamodb.jobs.rcu}
          WriteCapacityUnits: ${self:custom.global.dynamodb.jobs.wcu}
